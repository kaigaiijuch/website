#!/usr/bin/env bash

set -eu -o pipefail
set -C # Prevent output redirection using ‘>’, ‘>&’, and ‘<>’ from overwriting existing files.

if [[ "${TRACE-0}" == "1" ]]; then
    set -vx
fi

if [[ "${1-}" =~ ^-*h(elp)?$ ]]; then
    echo 'Usage: ./build output_directory config_file
Build static pages in the output directory.

ARGS:
  output_directory as the output directory. (default: public)
  config_file as the page config file. (default: bin/pages/list.rb)

OPTOINS:
  RAILS_ENV as $rails server boot environment. (default: production)
  SERVER_OPTIONS as $rails server options. (default: --daemon)
  PORT as $rails server port. (default: 3333)
'
    exit
fi

cd "$(dirname "$0")"
APP_ROOT=$(cd ../../; pwd)
rails="$APP_ROOT/bin/rails"

main() {
  output_directory=${1:-public}
  config_file=${2:-bin/pages/list.rb}

  process_file=$APP_ROOT/tmp/pids/static_page_server.pid
  log_file=$APP_ROOT/log/static_page_server.log
  if [[ -f $process_file ]]; then
    echo "Already running"
    exit 1
  fi
  rails_env=${RAILS_ENV:-production}
  server_options=${SERVER_OPTIONS:---log-to-stdout}
  port=${PORT:-3333}

  echo "# Building static pages for paths:"
  paths=$($rails runner "$APP_ROOT/$config_file")
  echo "${paths[@]}"
  echo

  echo "# boot rails server..."
  $rails server -e $rails_env -P $process_file -p $port $server_options >> $log_file 2>&1 &
   # Kill the server process when the script exits
  trap 'echo && echo "# kill server" && kill $(cat $process_file) && echo "server killed" && echo "log: $(cat $log_file)"' EXIT
  echo

  echo "# wait until the server is up..."
  while ! curl -s http://localhost:$port/up > /dev/null
  do
    echo "Waiting for server..."
    sleep 1
  done
  ## TODO: check timeout
  echo "Server is up."
  echo

  echo "# build static pages..."
  for path in $paths; do
    mkdir -p $APP_ROOT/$output_directory$(dirname $path)
    file="$APP_ROOT/$output_directory$path.html"
    if [[ -f $file ]]; then
      echo "rm: $file"
      rm $file
    fi

    echo "GET http://localhost:$port$path"
    tmp_suffix=.dl # workaround: if with public directory, file is served before curl finishes and it save empty file
    if ! curl --fail -s http://localhost:$port$path > $file$tmp_suffix; then
      echo "Failed to get: $path"
      rm $file$tmp_suffix
      exit 1
    fi
    mv $file$tmp_suffix $file
    echo "Saved: $file"
    echo
  done

  echo "# save version file..."
  if [[ -f $APP_ROOT/$output_directory/version ]]; then
    echo "rm: $APP_ROOT/$output_directory/version.txt"
    rm $APP_ROOT/$output_directory/version.txt
  fi

  # check git command exists
  if ! command -v git > /dev/null; then
    echo "skip: save vesrion file, git command not found"
  else
    ./version > $APP_ROOT/$output_directory/version
    echo "Saved: $APP_ROOT/$output_directory/version"
  fi
}

main "$@"

# styleguide | Style guides for Google-originated open-source projects https://google.github.io/styleguide/shellguide.html
# Shell Script Best Practices — The Sharat's https://sharats.me/posts/shell-script-best-practices/
