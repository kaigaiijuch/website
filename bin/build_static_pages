#!/usr/bin/env bash

set -eu -o pipefail
set -C # Prevent output redirection using ‘>’, ‘>&’, and ‘<>’ from overwriting existing files.

if [[ "${TRACE-0}" == "1" ]]; then
    set -vx
fi

if [[ "${1-}" =~ ^-*h(elp)?$ ]]; then
    echo 'Usage: ./build_static_pages output_directory page_config_file
  Build static pages in the output directory.

  output_directory as the output directory. (default: public)
  page_config_file as the page config file. (default: bin/pages/list.rb)

  RAILS_ENV as rails server boot environment. (default: production)
  SERVER_OPTIONS as rails server options. (default: --daemon)
  PORT as rails server port. (default: 3333)
'
    exit
fi

cd "$(dirname "$0")"

main() {
  process_file=tmp/pids/static_page_server.pid
  if [[ -f $process_file ]]; then
    echo "Already running"
    exit 1
  fi
  rails_env=${RAILS_ENV:-production}
  server_options=${SERVER_OPTIONS:---daemon}
  port=${PORT:-3333}
  output_directory=${1:-public}
  page_config_file=${2:-bin/pages/list.rb}

  echo "# Building static pages for paths:"
  paths=$(rails runner "../$page_config_file")
  echo "${paths[@]}"
  echo

  echo "# boot rails server..."
  rails server -e $rails_env -P $process_file -p $port $server_options
   # Kill the server process when the script exits
  trap 'echo && echo "# kill server" && kill $(cat ../$process_file) && echo "server killed"' EXIT
  echo

  echo "# wait until the server is up..."
  while ! curl -s http://localhost:$port/up > /dev/null
  do
    echo "Waiting for server..."
    sleep 1
  done
  ## TODO: check timeout
  echo "Server is up."
  echo

  echo "# build static pages..."
  for path in $paths; do
    mkdir -p ../$output_directory$(dirname $path)
    file="../$output_directory$path.html"
    if [[ -f $file ]]; then
      echo "rm: $file"
      rm $file
    fi

    echo "GET http://localhost:$port$path"
    tmp_suffix=.dl # workaround: if with public directory, file is served before curl finishes and it save empty file
    curl -s http://localhost:$port$path > $file$tmp_suffix
    mv $file$tmp_suffix $file
  done
}

main "$@"

# styleguide | Style guides for Google-originated open-source projects https://google.github.io/styleguide/shellguide.html
# Shell Script Best Practices — The Sharat's https://sharats.me/posts/shell-script-best-practices/
