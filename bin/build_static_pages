#!/usr/bin/env bash

set -eu -o pipefail
# set -C # Prevent output redirection using ‘>’, ‘>&’, and ‘<>’ from overwriting existing files.

if [[ "${TRACE-0}" == "1" ]]; then
    set -vx
fi

if [[ "${1-}" =~ ^-*h(elp)?$ ]]; then
    echo 'Usage: ./build_static_pages output_directory config_file
Build static pages in the output directory.
'
    exit
fi

cd "$(dirname "$0")"

main() {
  process_file=tmp/pids/static_page_server.pid
  if [[ -f $process_file ]]; then
    echo "Already running"
    exit 1
  fi
  rails_env=production
  port=3333
  bind=0.0.0.0
  output_directory=${1:-public}
  config_file=${2:-config/pages.rb}

  echo "# Building static pages for paths:"
  paths=$(rails runner "../$config_file")
  echo "${paths[@]}"
  echo

  echo "# boot rails server..."
  rails server -d -e $rails_env -P $process_file -p $port -b $bind
   # Kill the server process when the script exits
  trap 'echo && echo "# kill server" && kill $(cat ../$process_file) && echo "server killed"' EXIT
  echo

  echo "# wait until the server is up..."
  while ! curl -s http://localhost:$port/up > /dev/null
  do
    echo "Waiting for server..."
    sleep 1
  done
  ## TODO: check timeout
  echo "Server is up."
  echo

  echo "# build static pages..."
  for path in $paths; do
    echo "GET http://localhost:$port$path"
    mkdir -p ../$output_directory$(dirname $path)
    curl -s http://localhost:$port$path > ../$output_directory$path.html
  done
}

main "$@"

# styleguide | Style guides for Google-originated open-source projects https://google.github.io/styleguide/shellguide.html
# Shell Script Best Practices — The Sharat's https://sharats.me/posts/shell-script-best-practices/
